/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class IConfig {
    constructor(token: string) {
        this.authToken = token;
    }

    authToken: string;
}

export class ApiClientBase {
    private readonly config: IConfig;

    protected constructor(config: IConfig) {
        this.config = config;
    }

    protected transformOptions = (options: RequestInit): Promise<RequestInit> => {
        options.headers = {
            ...options.headers,
            Authorization: "Bearer " + this.config.authToken
        };
        return Promise.resolve(options);
    };
}

export class ProfileClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    authenticateLogin(request: ProfileAccount): Promise<ApiResponseOfProfileAccount> {
        let url_ = this.baseUrl + "/api/Profile/authenticate-login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthenticateLogin(_response);
        });
    }

    protected processAuthenticateLogin(response: Response): Promise<ApiResponseOfProfileAccount> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfProfileAccount.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponseOfProfileAccount>(<any>null);
    }
}

export class ApiResponseOfProfileAccount implements IApiResponseOfProfileAccount {
    httpStatusCode!: number;
    message?: string | undefined;
    itemCount!: number;
    result?: ProfileAccount | undefined;

    constructor(data?: IApiResponseOfProfileAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            this.message = _data["message"];
            this.itemCount = _data["itemCount"];
            this.result = _data["result"] ? ProfileAccount.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfProfileAccount {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfProfileAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["message"] = this.message;
        data["itemCount"] = this.itemCount;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApiResponseOfProfileAccount {
    httpStatusCode: number;
    message?: string | undefined;
    itemCount: number;
    result?: ProfileAccount | undefined;
}

export class ProfileAccount implements IProfileAccount {
    success!: boolean;
    colleagueID!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    accountTypeID!: number;
    accountType?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    passwordSetDate?: string | undefined;
    companyID!: number;
    airportID!: number;
    baseAirport?: string | undefined;

    constructor(data?: IProfileAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.colleagueID = _data["colleagueID"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.accountTypeID = _data["accountTypeID"];
            this.accountType = _data["accountType"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.passwordSetDate = _data["passwordSetDate"];
            this.companyID = _data["companyID"];
            this.airportID = _data["airportID"];
            this.baseAirport = _data["baseAirport"];
        }
    }

    static fromJS(data: any): ProfileAccount {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["colleagueID"] = this.colleagueID;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["accountTypeID"] = this.accountTypeID;
        data["accountType"] = this.accountType;
        data["username"] = this.username;
        data["password"] = this.password;
        data["passwordSetDate"] = this.passwordSetDate;
        data["companyID"] = this.companyID;
        data["airportID"] = this.airportID;
        data["baseAirport"] = this.baseAirport;
        return data; 
    }
}

export interface IProfileAccount {
    success: boolean;
    colleagueID: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    accountTypeID: number;
    accountType?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    passwordSetDate?: string | undefined;
    companyID: number;
    airportID: number;
    baseAirport?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}